(set-logic ALL)
(set-option :strings-exp true)
(set-option :produce-assignments true)
(set-option :produce-models true)
(define-fun % ((a Real) (b Real)) Real (- a (* (to_int (/ a b)) b)))
(define-fun <=s ((a String) (b String)) Bool (str.<= a b))
(define-fun <s ((a String) (b String)) Bool (and (str.<= a b) (not (= a b))))
(define-fun >s ((a String) (b String)) Bool (not (and (str.<= a b) (not (= a b)))))
(define-fun >=s ((a String) (b String)) Bool (or (>s a b) (= a b)))
(declare-const testPath String)
(assert (= "testValue" testPath))
(declare-const randomName String)
(assert (<s randomName "Julian"))
(declare-const randomName2 String)
(assert (>s randomName2 "Julian"))

(declare-const x Int)
(declare-const y Int)
(assert (= (+ x (* 2 y)) 20))
(assert (= (- x y) 2))
(check-sat)
(get-model)